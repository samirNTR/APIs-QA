{
  "id": 101,
  "name": "Samir",
  "role": "QA Engineer",
  "email": "samir@example.com",
  "status": "active",
  "address": {
    "city": "Bangalore",
    "zip": "560001"
  },
  "skills": ["Selenium", "Java", "TestNG"],
  "company": {
    "departments": [
      {
        "name": "QA Department",
        "employees": [
          {
            "id": 201,
            "name": "John Doe",
            "role": "Tester"
          }
        ]
      }
    ]
  },
  "pagination": {
    "totalRecords": 100,
    "pageSize": 10,
    "currentPage": 1,
    "totalPages": 10
  }
}

import io.restassured.RestAssured;
import io.restassured.response.Response;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class APITestValidation {
    public static void main(String[] args) {
        // Set Base URI
        baseURI = "https://api.example.com";

        // Send GET request and validate response
        given()
            .header("Authorization", "Bearer token123") // Authentication
        .when()
            .get("/users/101") // API endpoint
        .then()
            .assertThat()
                .statusCode(200) // ✅ 1. HTTP Status Code Validation
                .time(lessThan(2000L)) // ✅ 2. Response Time Validation
                .body("id", equalTo(101)) // ✅ 3. Response Field Validation
                .body("name", equalTo("Samir"))
                .body("role", equalTo("QA Engineer"))
                .body("email", matchesPattern("^[A-Za-z0-9+_.-]+@(.+)$")) // Email format
                .body("status", isOneOf("active", "inactive", "pending")) // Enum validation
                
                // ✅ 4. Validate Nested JSON Objects
                .body("address.city", equalTo("Bangalore"))
                .body("address.zip", matchesPattern("\\d{6}")) // Zip code validation
                
                // ✅ 5. Validate Arrays
                .body("skills", hasItems("Selenium", "Java")) // Must contain these skills
                
                // ✅ 6. Validate JSON Schema (Optional)
                // .body(matchesJsonSchemaInClasspath("userSchema.json"))

                // ✅ 7. Validate Object Sizes
                .body("company.departments.size()", greaterThan(0)) // Ensure at least 1 department exists
                .body("company.departments[0].name", notNullValue()) // First department name should not be null
                
                // ✅ 8. Validate Pagination Fields
                .body("pagination.totalRecords", equalTo(100))
                .body("pagination.pageSize", equalTo(10))
                .body("pagination.currentPage", equalTo(1))
                .body("pagination.totalPages", equalTo(10))

                // ✅ 9. Validate Headers
                .header("Content-Type", equalTo("application/json"))
                .header("Cache-Control", notNullValue()); // Cache header should exist
    }
}


How This Approach Covers All Points
✅ 1. HTTP Status Code → .statusCode(200)
✅ 2. Response Time → .time(Matchers.lessThan(2000L)) (Less than 2 sec)
✅ 3. JSON Schema Validation → (Can be added with matchesJsonSchemaInClasspath())
✅ 4. Response Body Validation → .body("field", Matchers.equalTo(value))
✅ 5. Data Type Validation → .instanceOf(Class.class)
✅ 6. Date Format Validation → .matchesPattern("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z")
✅ 7. Nested JSON Object Validation → .body("address.city", Matchers.equalTo("Bangalore"))
✅ 8. Array Validation → .hasItems("Selenium", "Java")
✅ 9. Pagination Validation → .body("pagination.totalRecords", Matchers.equalTo(100))
✅ 10. Header Validation → .header("Content-Type", Matchers.equalTo("application/json"))






///////////////////////////////////////////////////////////////////////////------------------------------------///////////////////////////////////

JSON Array Validations:-
-------------------------


{
  "employees": [
    {
      "id": 101,
      "name": "Samir",
      "role": "QA Engineer"
    },
    {
      "id": 102,
      "name": "Rashmi",
      "role": "Developer"
    },
    {
      "id": 103,
      "name": "Violet",
      "role": "Manager"
    },
    {
      "id": 104,
      "name": "Amit",
      "role": "QA Engineer"
    }
  ]
}



import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import static io.restassured.RestAssured.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import java.util.List;
import java.util.Map;

public class JSONArrayIterationJsonPath {
    public static void main(String[] args) {
        Response response = given()
                .when()
                .get("/employees")
                .then()
                .extract()
                .response();

        // Extract JSON response using RestAssured's JsonPath
        JsonPath jsonPath = response.jsonPath();
        List<Map<String, Object>> employees = jsonPath.getList("employees");

        // Iterate using forEach loop
        for (Map<String, Object> employee : employees) {
            int id = (int) employee.get("id");
            String name = (String) employee.get("name");
            String role = (String) employee.get("role");

            // Perform validations using Hamcrest
            assertThat(id, greaterThan(0));
            assertThat(name, not(emptyOrNullString()));
            assertThat(role, isOneOf("QA Engineer", "Developer", "Manager"));

            System.out.println("Validated Employee - ID: " + id + ", Name: " + name + ", Role: " + role);
        }
    }
}

















